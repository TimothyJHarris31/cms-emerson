// Copyright (C) 2016-2020 Sergey Akopkokhyants
// This project is licensed under the terms of the MIT license.
// https://github.com/akserg/ng2-dnd
import { __decorate } from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { AbstractComponent, AbstractHandleComponent } from './abstract.component';
let DraggableComponent = class DraggableComponent extends AbstractComponent {
    constructor(elemRef, dragDropService, config, cdr) {
        super(elemRef, dragDropService, config, cdr);
        /**
         * Callback function called when the drag actions happened.
         */
        this.onDragStart = new EventEmitter();
        this.onDragEnd = new EventEmitter();
        /**
         * Callback function called when the drag action ends with a valid drop action.
         * It is activated after the on-drop-success callback
         */
        this.onDragSuccessCallback = new EventEmitter();
        this._defaultCursor = this._elem.style.cursor;
        this.dragEnabled = true;
    }
    set draggable(value) {
        this.dragEnabled = !!value;
    }
    set dropzones(value) {
        this.dropZones = value;
    }
    /**
     * Drag allowed effect
     */
    set effectallowed(value) {
        this.effectAllowed = value;
    }
    /**
     * Drag effect cursor
     */
    set effectcursor(value) {
        this.effectCursor = value;
    }
    _onDragStartCallback(event) {
        this._dragDropService.isDragged = true;
        this._dragDropService.dragData = this.dragData;
        this._dragDropService.onDragSuccessCallback = this.onDragSuccessCallback;
        this._elem.classList.add(this._config.onDragStartClass);
        //
        this.onDragStart.emit({ dragData: this.dragData, mouseEvent: event });
    }
    _onDragEndCallback(event) {
        this._dragDropService.isDragged = false;
        this._dragDropService.dragData = null;
        this._dragDropService.onDragSuccessCallback = null;
        this._elem.classList.remove(this._config.onDragStartClass);
        //
        this.onDragEnd.emit({ dragData: this.dragData, mouseEvent: event });
    }
};
__decorate([
    Input("dragEnabled")
], DraggableComponent.prototype, "draggable", null);
__decorate([
    Output()
], DraggableComponent.prototype, "onDragStart", void 0);
__decorate([
    Output()
], DraggableComponent.prototype, "onDragEnd", void 0);
__decorate([
    Input()
], DraggableComponent.prototype, "dragData", void 0);
__decorate([
    Output("onDragSuccess")
], DraggableComponent.prototype, "onDragSuccessCallback", void 0);
__decorate([
    Input("dropZones")
], DraggableComponent.prototype, "dropzones", null);
__decorate([
    Input("effectAllowed")
], DraggableComponent.prototype, "effectallowed", null);
__decorate([
    Input("effectCursor")
], DraggableComponent.prototype, "effectcursor", null);
__decorate([
    Input()
], DraggableComponent.prototype, "dragImage", void 0);
__decorate([
    Input()
], DraggableComponent.prototype, "cloneItem", void 0);
DraggableComponent = __decorate([
    Directive({ selector: '[dnd-draggable]' })
], DraggableComponent);
export { DraggableComponent };
let DraggableHandleComponent = class DraggableHandleComponent extends AbstractHandleComponent {
    constructor(elemRef, dragDropService, config, _Component, cdr) {
        super(elemRef, dragDropService, config, _Component, cdr);
    }
};
DraggableHandleComponent = __decorate([
    Directive({ selector: '[dnd-draggable-handle]' })
], DraggableHandleComponent);
export { DraggableHandleComponent };
//# sourceMappingURL=data:application/json;base64,