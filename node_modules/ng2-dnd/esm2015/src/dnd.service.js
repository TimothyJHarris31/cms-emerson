// Copyright (C) 2016-2020 Sergey Akopkokhyants
// This project is licensed under the terms of the MIT license.
// https://github.com/akserg/ng2-dnd
import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { isPresent } from './dnd.utils';
export class DragDropData {
}
export function dragDropServiceFactory() {
    return new DragDropService();
}
let DragDropService = class DragDropService {
    constructor() {
        this.allowedDropZones = [];
    }
};
DragDropService = __decorate([
    Injectable()
], DragDropService);
export { DragDropService };
export function dragDropSortableServiceFactory(config) {
    return new DragDropSortableService(config);
}
let DragDropSortableService = class DragDropSortableService {
    constructor(_config) {
        this._config = _config;
    }
    get elem() {
        return this._elem;
    }
    markSortable(elem) {
        if (isPresent(this._elem)) {
            this._elem.classList.remove(this._config.onSortableDragClass);
        }
        if (isPresent(elem)) {
            this._elem = elem;
            this._elem.classList.add(this._config.onSortableDragClass);
        }
    }
};
DragDropSortableService = __decorate([
    Injectable()
], DragDropSortableService);
export { DragDropSortableService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG5kLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZG5kLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsK0NBQStDO0FBQy9DLCtEQUErRDtBQUMvRCxvQ0FBb0M7O0FBRXBDLE9BQU8sRUFBQyxVQUFVLEVBQWUsTUFBTSxlQUFlLENBQUM7QUFHdkQsT0FBTyxFQUFDLFNBQVMsRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUd0QyxNQUFNLE9BQU8sWUFBWTtDQUd4QjtBQUVELE1BQU0sVUFBVSxzQkFBc0I7SUFDbEMsT0FBTyxJQUFJLGVBQWUsRUFBRSxDQUFDO0FBQ2pDLENBQUM7QUFHRCxJQUFhLGVBQWUsR0FBNUIsTUFBYSxlQUFlO0lBQTVCO1FBQ0kscUJBQWdCLEdBQWtCLEVBQUUsQ0FBQztJQUl6QyxDQUFDO0NBQUEsQ0FBQTtBQUxZLGVBQWU7SUFEM0IsVUFBVSxFQUFFO0dBQ0EsZUFBZSxDQUszQjtTQUxZLGVBQWU7QUFPNUIsTUFBTSxVQUFVLDhCQUE4QixDQUFDLE1BQXNCO0lBQ2pFLE9BQU8sSUFBSSx1QkFBdUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMvQyxDQUFDO0FBR0QsSUFBYSx1QkFBdUIsR0FBcEMsTUFBYSx1QkFBdUI7SUFVaEMsWUFBb0IsT0FBc0I7UUFBdEIsWUFBTyxHQUFQLE9BQU8sQ0FBZTtJQUFHLENBQUM7SUFKOUMsSUFBVyxJQUFJO1FBQ1gsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFJRCxZQUFZLENBQUMsSUFBaUI7UUFDMUIsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDakU7UUFDRCxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNqQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNsQixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQzlEO0lBQ0wsQ0FBQztDQUNKLENBQUE7QUFyQlksdUJBQXVCO0lBRG5DLFVBQVUsRUFBRTtHQUNBLHVCQUF1QixDQXFCbkM7U0FyQlksdUJBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChDKSAyMDE2LTIwMjAgU2VyZ2V5IEFrb3Brb2toeWFudHNcbi8vIFRoaXMgcHJvamVjdCBpcyBsaWNlbnNlZCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIE1JVCBsaWNlbnNlLlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Frc2VyZy9uZzItZG5kXG5cbmltcG9ydCB7SW5qZWN0YWJsZSwgRXZlbnRFbWl0dGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtEcmFnRHJvcENvbmZpZ30gZnJvbSAnLi9kbmQuY29uZmlnJztcbmltcG9ydCB7aXNQcmVzZW50fSBmcm9tICcuL2RuZC51dGlscyc7XG5pbXBvcnQge1NvcnRhYmxlQ29udGFpbmVyfSBmcm9tICcuL3NvcnRhYmxlLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjbGFzcyBEcmFnRHJvcERhdGEge1xuICAgIGRyYWdEYXRhOiBhbnk7XG4gICAgbW91c2VFdmVudDogTW91c2VFdmVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRyYWdEcm9wU2VydmljZUZhY3RvcnkoKTogRHJhZ0Ryb3BTZXJ2aWNlICB7XG4gICAgcmV0dXJuIG5ldyBEcmFnRHJvcFNlcnZpY2UoKTtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERyYWdEcm9wU2VydmljZSB7XG4gICAgYWxsb3dlZERyb3Bab25lczogQXJyYXk8c3RyaW5nPiA9IFtdO1xuICAgIG9uRHJhZ1N1Y2Nlc3NDYWxsYmFjazogRXZlbnRFbWl0dGVyPERyYWdEcm9wRGF0YT47XG4gICAgZHJhZ0RhdGE6IGFueTtcbiAgICBpc0RyYWdnZWQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcmFnRHJvcFNvcnRhYmxlU2VydmljZUZhY3RvcnkoY29uZmlnOiBEcmFnRHJvcENvbmZpZyk6IERyYWdEcm9wU29ydGFibGVTZXJ2aWNlICB7XG4gICAgcmV0dXJuIG5ldyBEcmFnRHJvcFNvcnRhYmxlU2VydmljZShjb25maWcpO1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgRHJhZ0Ryb3BTb3J0YWJsZVNlcnZpY2Uge1xuICAgIGluZGV4OiBudW1iZXI7XG4gICAgc29ydGFibGVDb250YWluZXI6IFNvcnRhYmxlQ29udGFpbmVyO1xuICAgIGlzRHJhZ2dlZDogYm9vbGVhbjtcblxuICAgIHByaXZhdGUgX2VsZW06IEhUTUxFbGVtZW50O1xuICAgIHB1YmxpYyBnZXQgZWxlbSgpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbGVtO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2NvbmZpZzpEcmFnRHJvcENvbmZpZykge31cblxuICAgIG1hcmtTb3J0YWJsZShlbGVtOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuX2VsZW0pKSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtLmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fY29uZmlnLm9uU29ydGFibGVEcmFnQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1ByZXNlbnQoZWxlbSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2VsZW0gPSBlbGVtO1xuICAgICAgICAgICAgdGhpcy5fZWxlbS5jbGFzc0xpc3QuYWRkKHRoaXMuX2NvbmZpZy5vblNvcnRhYmxlRHJhZ0NsYXNzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==